"""
Exercise
Using the "split" string method from the preceding lesson, 
complete the get_word function to return the {n}th word from 
a passed sentence. For example, get_word("This is a lesson about 
lists", 4) should return "lesson", which is the 4th word in this 
sentence. Hint: remember that list indexes start at 0, not 1.
"""

def get_word(sentence, n):
	# Only proceed if n is positive 
	if n > 0:
		words = sentence.split()
		# Only proceed if n is not more than the number of words 
		if n <= len(words):
			return(words[n-1])
	return("")

print(get_word("This is a lesson about lists", 4)) # Should print: lesson
print(get_word("This is a lesson about lists", -4)) # Nothing
print(get_word("Now we are cooking!", 1)) # Should print: Now
print(get_word("Now we are cooking!", 5)) # Nothing

"""
Exercise
The skip_elements function returns a list containing every other element 
from an input list, starting with the first element. Complete this function 
to do that, using the for loop to iterate through the input list.
"""

def skip_elements(elements):
	# Initialize variables
    new_list = []
    i = 0

    # Iterate through the list
    for element in elements:
        # Does this element belong in the resulting list?
        if i % 2 == 0:
          # Add this element to the resulting list
          new_list.append(element)
        # Increment i
        i += 1

    return new_list

print(skip_elements(["a", "b", "c", "d", "e", "f", "g"])) # Should be ['a', 'c', 'e', 'g']
print(skip_elements(['Orange', 'Pineapple', 'Strawberry', 'Kiwi', 'Peach'])) # Should be ['Orange', 'Strawberry', 'Peach']
print(skip_elements([])) # Should be []

"""
Exercise - Lists and Tuples
Let's use tuples to store information about a file: its name, 
its type and its size in bytes. Fill in the gaps in this code to 
return the size in kilobytes (a kilobyte is 1024 bytes) up to 2 decimal places.
"""

def file_size(file_info):
	name, type, size = file_info
	return("{:.2f}".format(size / 1024))

print(file_size(('Class Assignment', 'docx', 17875))) # Should print 17.46
print(file_size(('Notes', 'txt', 496))) # Should print 0.48
print(file_size(('Program', 'py', 1239))) # Should print 1.21

"""
Exercise - Iterating over Lists and Tuples
Try out the enumerate function for yourself in this quick exercise. 
Complete the skip_elements function to return every other element from the list, 
this time using the enumerate function to check if an element is on an even 
position or an odd position.
"""

def skip_elements(elements):
	# code goes here
	element = []
	for i, e in enumerate(elements):
		if i % 2 == 0:
			element.append(e)
	return element

print(skip_elements(["a", "b", "c", "d", "e", "f", "g"])) # Should be ['a', 'c', 'e', 'g']
print(skip_elements(['Orange', 'Pineapple', 'Strawberry', 'Kiwi', 'Peach'])) # Should be ['Orange', 'Strawberry', 'Peach']


"""
Exercise - List Comprehensions
The odd_numbers function returns a list of odd numbers between 1 and n, 
inclusively. Fill in the blanks in the function, using list comprehension. 
Hint: remember that list and range counters start at 0 and end at the limit minus 1.
"""

def odd_numbers(n):
	return [x for x in range(1,n+1) if x % 2 != 0]

print(odd_numbers(5))  # Should print [1, 3, 5]
print(odd_numbers(10)) # Should print [1, 3, 5, 7, 9]
print(odd_numbers(11)) # Should print [1, 3, 5, 7, 9, 11]
print(odd_numbers(1))  # Should print [1]
print(odd_numbers(-1)) # Should print []

"""
Exercise - What is a dictionary?
The "toc" dictionary represents the table of contents for a book. 
Fill in the blanks to do the following: 1) Add an entry for Epilogue 
on page 39. 2) Change the page number for Chapter 3 to 24. 3) Display 
the new dictionary contents. 4) Display True if there is Chapter 5, 
False if there isn't.
"""

toc = {"Introduction":1, "Chapter 1":4, "Chapter 2":11, "Chapter 3":25, "Chapter 4":30}
toc["Epilogue"] = 39
toc["Chapter 3"] = 24
print(toc)
print("Chapter 5" in toc)

___ # Epilogue starts on page 39
___ # Chapter 3 now starts on page 24
___ # What are the current contents of the dictionary?
___ # Is there a Chapter 5?


"""
Exercise - Iterating over the Contents of a Dictionary
Now, it's your turn! Have a go at iterating over a dictionary!
Complete the code to iterate through the keys and values of the 
cool_beasts dictionary. Remember that the items method returns a 
tuple of key, value for each element in the dictionary.
"""

cool_beasts = {"octopuses":"tentacles", "dolphins":"fins", "rhinos":"horns"}
for key, val in cool_beasts.items():
    print("{} have {}".format(key, val))

"""
Exercise - Dictionaries vs. Lists
In Python, a dictionary can only hold a single value for a given key. 
To workaround this, our single value can be a list containing multiple values. 
Here we have a dictionary called "wardrobe" with items of clothing and their colors. 
Fill in the blanks to print a line for each item of clothing with each color, 
for example: "red shirt", "blue shirt", and so on.
"""

wardrobe = {"shirt":["red","blue","white"], "jeans":["blue","black"]}
for key in wardrobe:
	for colour in wardrobe[key]:
		print("{} {}".format(colour, key))

